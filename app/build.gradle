plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.maibaapp.sweetly"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("${project.rootDir.absolutePath}/keystore.keystore")
            storePassword '494ca1bcd82b0a8c4e74593acc69fafa'
            keyAlias 'lm'
            keyPassword '494ca1bcd82b0a8c4e74593acc69fafa'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        //dataBinding = true
        // for view binding :
        viewBinding = true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    flavorDimensions 'channel'
    productFlavors {
        dev {
            dimension 'channel'
            buildConfigField 'Boolean', 'DEV', 'true'
        }
        normal{
            dimension 'channel'
            buildConfigField 'Boolean', 'DEV', 'false'
        }
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }
    applicationVariants.all { variant ->
        def outputFileDir = "${project.projectDir.absolutePath}/${variant.buildType.name}/${variant.flavorName}/${variant.versionName}"
        println("生成目录: $outputFileDir  root:${project.rootDir.absolutePath}")

//        if (variant.buildType.name == "release"&&variant.flavorName == "online") {
//            println("outputDirectory1:${variant.getPackageApplicationProvider().get().outputDirectory}")
//            variant.getPackageApplicationProvider().get().outputDirectory = new File(outputFileDir)
//        }
        //variant.getPackageApplicationProvider().get().outputDirectory = new File("build/outputs/apk/${variant.flavorName}/${variant.buildType.name}/${variant.versionName}")
        println("outputDirectory2:${variant.getPackageApplicationProvider().get().outputDirectory} ")

        def today = new Date()
        println(" project.name:${project.name} rootProject.name:${rootProject.name} ")
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                variant.flavorName + "_" +
                variant.buildType.name + "_"+
                variant.versionName + "_" +
                today.format('yyyyMMddhhmm') +
                ".apk"
        println(" project.gradle.gradleVersion:${project.gradle.gradleVersion} path:$path")
        variant.outputs.forEach {
            it.outputFileName = path
        }

       /* variant.assemble.doLast {
            File out = new File(outputFileDir)
            def allPath = "${project.projectDir.absolutePath}/${variant.buildType.name}/all/${variant.versionName}/${today.format('yyyyMMddhhmm')}"
            File all = new File(allPath)
            def map = variant.getMappingFileProvider().get()
            if (map != null){
                copy {
                    from map.singleFile()
                    into  out
                    rename {
                        String fileName -> "${variant.buildType.name}-${variant.flavorName}-mapping-${variant.versionName}.txt"
                    }
                    variant.outputs.forEach{ file->
                        copy{
                            from file.outputFile
                            into out
                        }
                        if (variant.buildType.name=="release"){
                            copy{
                                from file.outputFile
                                into all
                            }
                        }
                    }
                }
            }
        }*/
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.recyclerview:recyclerview:1.2.0-beta01'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //hilt  https://developer.android.com/training/dependency-injection/hilt-android#setup
    implementation "com.google.dagger:hilt-android:2.28.3-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28.3-alpha"
    implementation 'androidx.hilt:hilt-common:1.0.0-alpha02'
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    // When using Kotlin.
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    //协程
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    //retrofit + okHttp3
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.7.2'
    api 'com.squareup.retrofit2:converter-scalars:2.6.0'
    api "com.google.code.gson:gson:2.8.6"
    implementation 'com.squareup.okio:okio:2.6.0'

    //crop
    implementation 'com.github.yalantis:ucrop:2.2.5'

    api "com.jeremyliao:live-event-bus-x:1.5.7"
    //glide
    api "com.github.bumptech.glide:glide:4.11.0"
    kapt "com.github.bumptech.glide:compiler:4.11.0"
    //umeng
    implementation 'com.umeng.umsdk:common:9.3.7'//必选
    implementation  'com.umeng.umsdk:asms:1.2.1'//必选
    implementation "com.umeng.umsdk:apm:1.1.1" // 应用性能监控SDK依赖(可选)
    //mmkv
    implementation 'com.tencent:mmkv-static:1.2.5'

    api "commons-io:commons-io:20030203.000550"

    // chunk 用于网络调试
    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'

    //loading
    implementation 'com.wang.avi:library:2.1.3'

    //  alicloud
    //implementation 'com.aliyun.ams:alicloud-android-feedback:3.3.1'
    // 沉浸式状态栏 ImmersionBar 三方库
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    implementation 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'
    //permissionx
    implementation 'com.permissionx.guolindev:permissionx:1.4.0'
    //SmartRefreshLayout
    implementation "com.scwang.smart:refresh-layout-kernel:2.0.0-alpha-1"      //核心必须依赖
    implementation "com.scwang.smart:refresh-header-classics:2.0.0-alpha-1"//经典刷新头
    implementation "com.scwang.smart:refresh-header-radar:2.0.0-alpha-1"  //雷达刷新头
    implementation 'com.scwang.smart:refresh-header-falsify:2.0.0-alpha-1'     //虚拟刷新头
    implementation 'com.scwang.smart:refresh-header-material:2.0.0-alpha-1'   //谷歌刷新头
    implementation 'com.scwang.smart:refresh-header-two-level:2.0.0-alpha-1'   //二级刷新头
    implementation 'com.scwang.smart:refresh-footer-ball:2.0.0-alpha-1'        //球脉冲加载
    implementation 'com.scwang.smart:refresh-footer-classics:2.0.0-alpha-1'    //经典加载


}